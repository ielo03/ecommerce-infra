name: Promote to UAT

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Service to promote"
        required: true
        type: choice
        options:
          - product-service
          - order-service
          - user-service
          - api-gateway
      version:
        description: "Version to promote (leave empty to use latest QA version)"
        required: false
        type: string

  repository_dispatch:
    types: [deploy-to-uat]

jobs:
  verify-qa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set service name
        id: set-service
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "SERVICE=${{ github.event.inputs.service }}" >> $GITHUB_ENV
          else
            echo "SERVICE=${{ github.event.client_payload.service }}" >> $GITHUB_ENV
          fi

          echo "Using service: $SERVICE"

      - name: Check if service is verified in QA
        id: check-verified
        run: |
          # Check if version is verified in QA
          VERIFIED=$(jq -r '.services."'$SERVICE'".qa_verified // false' version.json)

          if [[ "$VERIFIED" != "true" ]]; then
            echo "::warning::Service $SERVICE has not been verified in QA. It is recommended to run smoke tests in QA before promoting to UAT."
          fi

          echo "verified=$VERIFIED" >> $GITHUB_OUTPUT

  promote:
    needs: verify-qa
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set service name
        id: set-service
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "SERVICE=${{ github.event.inputs.service }}" >> $GITHUB_ENV
          else
            echo "SERVICE=${{ github.event.client_payload.service }}" >> $GITHUB_ENV
          fi

          echo "Using service: $SERVICE"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from version.json
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using specified version: $VERSION"
            
            # Verify version exists in QA
            QA_VERSION=$(jq -r '.services."'$SERVICE'".qa' version.json)
            if [ "$VERSION" != "$QA_VERSION" ]; then
              echo "Warning: Specified version $VERSION does not match current QA version $QA_VERSION"
            fi
          else
            VERSION=$(jq -r '.services."'$SERVICE'".qa' version.json)
            echo "Using latest QA version: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Promote version
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: us-west-2
          SERVICE_NAME: ${{ env.SERVICE }}
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          chmod +x ./.github/scripts/version-promotion.sh
          ./.github/scripts/version-promotion.sh "$SERVICE_NAME" qa uat

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ecommerce-eks-uat --region us-west-2

      - name: Update Kubernetes manifests
        run: |
          # Update the image tag in the kustomization.yaml file
          cd kubernetes/overlays/uat/${{ env.SERVICE }}

          # Use sed to update the newTag value
          sed -i "s/newTag: .*/newTag: ${{ steps.get-version.outputs.version }}/" kustomization.yaml

          # Apply the changes
          kubectl apply -k .

      - name: Commit and push version file update
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.json
          git add kubernetes/overlays/uat/${{ env.SERVICE }}/kustomization.yaml
          git commit -m "Promote ${{ env.SERVICE }} from QA to UAT (version ${{ steps.get-version.outputs.version }})"
          git push

      - name: Run smoke tests
        run: |
          echo "Running smoke tests for ${{ env.SERVICE }} in UAT environment..."

          # Get the API Gateway endpoint
          ENDPOINT=$(kubectl get svc api-gateway -n ecommerce-uat -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -z "$ENDPOINT" ]; then
            ENDPOINT=$(kubectl get svc api-gateway -n ecommerce-uat -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          fi

          if [ -z "$ENDPOINT" ]; then
            echo "Failed to get API Gateway endpoint"
            exit 1
          fi

          # Run smoke tests
          chmod +x ./scripts/qa/smoke-test.sh
          ./scripts/qa/smoke-test.sh "http://$ENDPOINT" ${{ env.SERVICE }}

      - name: Update version status on success
        if: success()
        run: |
          # Mark as verified in UAT
          jq '.services."'$SERVICE'".uat_verified = true' version.json > version.json.new
          mv version.json.new version.json

          # Commit and push version file update
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.json
          git commit -m "Mark ${{ env.SERVICE }} version ${{ steps.get-version.outputs.version }} as verified in UAT"
          git push

      - name: Notify on success
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Successfully promoted ${{ env.SERVICE }} version ${{ steps.get-version.outputs.version }} to UAT environment"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ Failed to promote ${{ env.SERVICE }} to UAT environment"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
