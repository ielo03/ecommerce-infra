name: Nightly Build

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  check-updated:
    runs-on: ubuntu-latest
    outputs:
      updated_services: ${{ steps.check_updates.outputs.updated_services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for service updates
        id: check_updates
        run: |
          UPDATED_JSON="[]"
          for service in api-gateway frontend backend; do
            ts=$(jq -r ".services[\"$service\"].timestamp" version.json)
            last_commit=$(git -C ecommerce-microservices log -1 --format=%cI -- $service || echo "")
            if [[ -n "$last_commit" && "$last_commit" > "$ts" ]]; then
              UPDATED_JSON=$(jq -c --arg srv "$service" '. + [$srv]' <<< "$UPDATED_JSON")
            fi
          done
          echo "updated_services=$UPDATED_JSON" >> $GITHUB_OUTPUT

  test-and-build:
    needs: check-updated
    runs-on: ubuntu-latest
    if: needs.check-updated.outputs.updated_services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.check-updated.outputs.updated_services) }}
      fail-fast: false
    steps:
      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        id: run_test
        working-directory: ecommerce-microservices/${{ matrix.service }}
        run: |
          npm install
          npm test
        continue-on-error: false

      - name: Set up Docker Buildx
        if: steps.run_test.outcome == 'success'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        if: steps.run_test.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Build and push image
      #   if: steps.run_test.outcome == 'success'
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --tag 061039790334.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.service }}:nightly \
      #       --push \
      #       -f ./ecommerce-microservices/${{ matrix.service }}/Dockerfile \
      #       ./ecommerce-microservices/${{ matrix.service }}
