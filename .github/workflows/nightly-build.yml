name: Nightly Build

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  check-updated:
    runs-on: ubuntu-latest
    outputs:
      updated_services: ${{ steps.check_updates.outputs.updated_services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for service updates
        id: check_updates
        run: |
          UPDATED_JSON=$(cat version.json)
          for service in api-gateway frontend backend; do
            ts=$(echo "$UPDATED_JSON" | jq -r ".services[\"$service\"].timestamp")
            last_commit=$(git -C ecommerce-microservices log -1 --format=%cI -- "$service" 2>/dev/null || echo "")
            echo "DEBUG: Checking service '$service'"
            echo "DEBUG: Recorded timestamp: $ts"
            echo "DEBUG: Latest commit date:  $last_commit"
            if [[ -n "$last_commit" && "$last_commit" > "$ts" ]]; then
              UPDATED_JSON=$(echo "$UPDATED_JSON" | jq ".services[\"$service\"].timestamp = \"$last_commit\"")
              echo "DEBUG:  -> Marking '$service' as updated"
            else
              echo "DEBUG:  -> No new commits for '$service'"
            fi
          done
          echo "$UPDATED_JSON" > version.json

  test-and-build:
    needs: check-updated
    runs-on: ubuntu-latest
    if: needs.check-updated.outputs.updated_services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.check-updated.outputs.updated_services) }}
      fail-fast: false
    steps:
      - name: Checkout ecommerce-infra repo
        uses: actions/checkout@v4
        with:
          path: ecommerce-infra

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        id: run_test
        working-directory: ecommerce-microservices/${{ matrix.service }}
        run: |
          npm install
          npm test
        continue-on-error: false

      - name: Determine next version
        id: next_version
        run: |
          latest=$(jq -r ".services[\"${{ matrix.service }}\"].latest" ecommerce-infra/version.json)
          major=$(cut -d. -f1 <<< "$latest")
          minor=$(cut -d. -f2 <<< "$latest")
          patch=$(cut -d. -f3 <<< "$latest")
          next_patch=$((patch + 1))
          echo "next_version=$major.$minor.$next_patch" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.run_test.outcome == 'success'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        if: steps.run_test.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker image
        if: steps.run_test.outcome == 'success'
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag 061039790334.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.service }}:${{ steps.next_version.outputs.next_version }} \
            --load \
            -f ./ecommerce-microservices/${{ matrix.service }}/Dockerfile \
            ./ecommerce-microservices/${{ matrix.service }}

      - name: Push Docker image
        if: steps.run_test.outcome == 'success'
        run: |
          echo "SUCCESS"
          # docker push 061039790334.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.service }}:${{ steps.next_version.outputs.next_version }}
