name: Nightly Build
permissions:
  contents: write

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  check-updated:
    runs-on: ubuntu-latest
    outputs:
      updated_services: ${{ steps.check_updates.outputs.updated_services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for service updates
        id: check_updates
        run: |
          # grab the full version.json into a variable
          ORIG_JSON=$(cat version.json)

          # start with an empty JSON array
          UPDATED_SERVICES="[]"

          for service in api-gateway frontend backend; do
            # pull the saved timestamp
            ts=$(jq -r ".services[\"$service\"].timestamp" <<<"$ORIG_JSON")
            # find the last commit touching that subdir
            last_commit=$(git -C ecommerce-microservices \
                            log -1 --format=%cI -- "$service" 2>/dev/null || echo "")

            echo "DEBUG: Checking service '$service'"
            echo "DEBUG:   recorded ts: $ts"
            echo "DEBUG:   latest commit: $last_commit"

            if [[ -n "$last_commit" ]]; then
              ts_epoch=$(date -d "$ts" +%s)
              commit_epoch=$(date -d "$last_commit" +%s)
              echo "DEBUG:   ts_epoch=$ts_epoch, commit_epoch=$commit_epoch"

              if (( commit_epoch > ts_epoch )); then
                # append this service name into the JSON array
                UPDATED_SERVICES=$(jq -c --arg srv "$service" '. + [$srv]' <<<"$UPDATED_SERVICES")
                echo "DEBUG:   → marking '$service' as updated"
              else
                echo "DEBUG:   → no new commits for '$service'"
              fi
            else
              echo "DEBUG:   → no commits found at all for '$service'"
            fi
          done

          # expose the array to downstream steps
          echo "updated_services=$UPDATED_SERVICES" >> $GITHUB_OUTPUT
        shell: bash

  test-and-build:
    needs: check-updated
    runs-on: ubuntu-latest
    if: needs.check-updated.outputs.updated_services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.check-updated.outputs.updated_services) }}
        platform: ["linux/arm64/v8"]
      fail-fast: false
    steps:
      - name: Checkout ecommerce-infra repo
        uses: actions/checkout@v4
        with:
          path: ecommerce-infra
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests on ${{ matrix.service }}
        id: run_test
        working-directory: ecommerce-microservices/${{ matrix.service }}
        run: |
          npm install
          npm test
        continue-on-error: false

      - name: Determine next version of ${{ matrix.service }}
        id: next_version
        working-directory: ecommerce-infra
        run: |
          latest=$(jq -r ".services[\"${{ matrix.service }}\"].latest" version.json)
          major=$(cut -d. -f1 <<< "$latest")
          minor=$(cut -d. -f2 <<< "$latest")
          patch=$(cut -d. -f3 <<< "$latest")
          next_patch=$((patch + 1))
          echo "next_version=$major.$minor.$next_patch" >> $GITHUB_OUTPUT

      - name: Set version in health checks for ${{ matrix.service }}
        working-directory: ecommerce-microservices/${{ matrix.service }}
        run: |
          case "${{ matrix.service }}" in
            frontend)
              file="server.js"
              placeholder='${FRONTEND_VERSION}'
              ;;
            backend)
              file="index.js"
              placeholder='${BACKEND_VERSION}'
              ;;
            api-gateway)
              file="index.js"
              placeholder='${API_GATEWAY_VERSION}'
              ;;
          esac
          sed -i "s|$placeholder|${{ steps.next_version.outputs.next_version }}|g" "$file"

      - name: Set up Docker Buildx
        if: steps.run_test.outcome == 'success'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        if: steps.run_test.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build ${{ matrix.service }} Docker image
        if: steps.run_test.outcome == 'success'
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --tag 061039790334.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.service }}:${{ steps.next_version.outputs.next_version }} \
            --load \
            -f ./ecommerce-microservices/${{ matrix.service }}/Dockerfile \
            ./ecommerce-microservices/${{ matrix.service }}

      - name: Update, commit & push version.json
        if: steps.run_test.outcome == 'success'
        run: |
          cd ecommerce-infra
          NEXT_VERSION=${{ steps.next_version.outputs.next_version }}
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          jq --arg svc "${{ matrix.service }}" \
              --arg ver "$NEXT_VERSION" \
              --arg ts "$NOW" \
            '.services[$svc].latest    = $ver |
              .services[$svc].qa        = $ver |
              .services[$svc].timestamp = $ts' \
            version.json > tmp.json \
            && mv tmp.json version.json
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version.json
          git commit -m "ci: bump ${{ matrix.service }} to $NEXT_VERSION [skip ci]"
          # retry pull and push to avoid race conditions, up to 10 times
          attempt=0
          max_attempts=10
          until git pull --rebase origin main && git push origin main; do
            attempt=$((attempt+1))
            if [ "$attempt" -ge "$max_attempts" ]; then
              echo "Push failed after $max_attempts attempts, exiting."
              exit 1
            fi
            echo "Push failed, retrying in 1s... ($attempt/$max_attempts)"
            sleep 1
          done

      - name: Push ${{ matrix.service }} Docker image
        if: steps.run_test.outcome == 'success'
        run: |
          docker push 061039790334.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.service }}:${{ steps.next_version.outputs.next_version }}

  deploy-to-qa:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: needs.test-and-build.result == 'success'
    steps:
      - name: Checkout ecommerce-infra repo
        uses: actions/checkout@v4
        with:
          path: ecommerce-infra
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Deploy to QA server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.QA_SERVER_HOST }}
          username: ${{ secrets.QA_SERVER_USER }}
          key: ${{ secrets.QA_SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ecommerce-infra
            git pull origin main
            ./run-qa-environment-ec2.sh
