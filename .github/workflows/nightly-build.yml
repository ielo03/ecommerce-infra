name: Nightly Build

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for service updates
        id: check_updates
        run: |
          UPDATED=""
          for service in api-gateway frontend backend; do
            ts=$(jq -r ".services[\"$service\"].timestamp" version.json)
            last_commit=$(git -C ecommerce-microservices log -1 --format=%cI -- $service || echo "")
            if [[ -n "$last_commit" && "$last_commit" > "$ts" ]]; then
              UPDATED="$UPDATED $service"
            fi
          done
          echo "updated_services=$UPDATED" >> $GITHUB_OUTPUT

      - name: Run unit-tests
        if: steps.check_updates.outputs.updated_services != ''
        run: |
          for service in ${{ steps.check_updates.outputs.updated_services }}; do
            echo "Running tests for $service"
            cd ecommerce-microservices/$service
            npm install
            npm test
            cd ../..
          done

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout ecommerce-microservices repo
        uses: actions/checkout@v4
        with:
          repository: ielo03/ecommerce-microservices
          path: ecommerce-microservices
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU for ARM emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Build and push image for Arm64
      #   run: |
      #     docker buildx build \
      #       --platform linux/arm64 \
      #       --tag 061039790334.dkr.ecr.us-west-2.amazonaws.com/api-gateway:nightly \
      #       --push \
      #       -f ./api-gateway/Dockerfile .
