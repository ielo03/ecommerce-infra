name: Nightly CI/CD Pipeline

on:
  schedule:
    - cron: "0 0 * * *" # Run nightly at midnight UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ecommerce-microservices/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ecommerce-microservices/${{ matrix.service }}
          npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-qa/${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ecommerce-microservices/${{ matrix.service }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update version file
        run: |
          # Get current version
          VERSION=$(jq -r '.services."${{ matrix.service }}".qa' version.json)

          # Increment patch version
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Update version.json
          jq '.services."${{ matrix.service }}".qa = "'$NEW_VERSION'"' version.json > version.json.new
          mv version.json.new version.json

          # Update last_updated timestamp
          jq '.last_updated = "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"' version.json > version.json.new
          mv version.json.new version.json

          # Commit and push version file update
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.json
          git commit -m "Update ${{ matrix.service }} version in QA to $NEW_VERSION"
          git push

      - name: Trigger QA Deployment
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-to-qa
          client-payload: '{"service": "${{ matrix.service }}", "version": "${{ steps.update-version.outputs.new_version }}", "commit": "${{ github.sha }}"}'
