name: Nightly CI/CD Pipeline

on:
  schedule:
    - cron: "0 0 * * *" # Run nightly at midnight UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.check-changes.outputs.changed_services }}
      any_changes: ${{ steps.check-changes.outputs.any_changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper change detection

      - name: Check for changes in microservices
        id: check-changes
        run: |
          # Get the commit hash from 24 hours ago
          YESTERDAY_COMMIT=$(git rev-list -n 1 --before="24 hours ago" HEAD)

          # Initialize variables
          CHANGED_SERVICES=()

          # Check each service directory for changes
          for SERVICE in product-service order-service user-service api-gateway; do
            # Check if there are any changes in the service directory
            if git diff --name-only $YESTERDAY_COMMIT HEAD -- ecommerce-microservices/$SERVICE | grep -q .; then
              CHANGED_SERVICES+=("$SERVICE")
              echo "$SERVICE has changes"
            else
              echo "$SERVICE has no changes"
            fi
          done

          # Convert array to JSON
          CHANGED_JSON=$(printf '%s\n' "${CHANGED_SERVICES[@]}" | jq -R . | jq -s .)
          echo "changed_services=$CHANGED_JSON" >> $GITHUB_OUTPUT

          # Set flag if any services changed
          if [ ${#CHANGED_SERVICES[@]} -gt 0 ]; then
            echo "any_changes=true" >> $GITHUB_OUTPUT
          else
            echo "any_changes=false" >> $GITHUB_OUTPUT
          fi

          echo "Changed services: $CHANGED_JSON"

  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changes == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed_services) }}
      # Important: This ensures all services are tested even if one fails
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ecommerce-microservices/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ecommerce-microservices/${{ matrix.service }}
          npm ci

      - name: Run linting
        id: lint
        continue-on-error: true
        run: |
          cd ecommerce-microservices/${{ matrix.service }}
          npm run lint

      - name: Run tests
        id: test
        continue-on-error: true
        run: |
          cd ecommerce-microservices/${{ matrix.service }}
          npm test

      - name: Send email notification on test failure
        if: steps.test.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const axios = require('axios');

            const sendgridApiKey = '${{ secrets.SENDGRID_API_KEY }}';
            const notificationEmail = '${{ secrets.NOTIFICATION_EMAIL }}';

            const data = {
              personalizations: [
                {
                  to: [{ email: notificationEmail }],
                  subject: `[ALERT] Tests failed for ${{ matrix.service }}`
                }
              ],
              from: { email: 'ci-notifications@example.com' },
              content: [
                {
                  type: 'text/html',
                  value: `
                    <h2>CI Test Failure Alert</h2>
                    <p>Tests have failed for <strong>${{ matrix.service }}</strong> in the nightly build.</p>
                    <p>Commit: ${process.env.GITHUB_SHA}</p>
                    <p>Branch: ${process.env.GITHUB_REF}</p>
                    <p>Workflow run: <a href="https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}">View details</a></p>
                    <p>Please investigate and fix the failing tests as soon as possible.</p>
                  `
                }
              ]
            };

            try {
              await axios({
                method: 'post',
                url: 'https://api.sendgrid.com/v3/mail/send',
                headers: {
                  'Authorization': `Bearer ${sendgridApiKey}`,
                  'Content-Type': 'application/json'
                },
                data: data
              });
              
              console.log('Test failure notification email sent successfully');
            } catch (error) {
              console.error('Failed to send notification email:', error.message);
            }

      # Only proceed to build and push if tests passed
      - name: Check test results
        if: always()
        run: |
          if [ "${{ steps.test.outcome }}" != "success" ]; then
            echo "Tests failed for ${{ matrix.service }}. Skipping build and push."
            exit 1
          fi

      - name: Configure AWS credentials
        if: steps.test.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        if: steps.test.outcome == 'success'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        if: steps.test.outcome == 'success'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-qa/${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ecommerce-microservices/${{ matrix.service }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update version file
        if: steps.test.outcome == 'success'
        run: |
          # Get current version
          VERSION=$(jq -r '.services."${{ matrix.service }}".qa' version.json)

          # Increment patch version
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Update version.json
          jq '.services."${{ matrix.service }}".qa = "'$NEW_VERSION'"' version.json > version.json.new
          mv version.json.new version.json

          # Update last_updated timestamp
          jq '.last_updated = "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"' version.json > version.json.new
          mv version.json.new version.json

          # Commit and push version file update
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.json
          git commit -m "Update ${{ matrix.service }} version in QA to $NEW_VERSION"
          git push

      - name: Trigger QA Deployment
        if: steps.test.outcome == 'success'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-to-qa
          client-payload: '{"service": "${{ matrix.service }}", "version": "${{ steps.update-version.outputs.new_version }}", "commit": "${{ github.sha }}"}'

  notify-no-changes:
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changes == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Notify no changes detected
        run: |
          echo "No changes detected in any microservice in the last 24 hours."

      - name: Slack notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "ℹ️ Nightly CI/CD Pipeline: No changes detected in any microservice in the last 24 hours."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
