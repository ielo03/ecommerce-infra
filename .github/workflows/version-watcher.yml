name: Version Watcher

on:
  push:
    branches:
      - main
    paths:
      - "version.json"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      qa-changes: ${{ steps.check-qa.outputs.changes }}
      uat-changes: ${{ steps.check-uat.outputs.changes }}
      prod-changes: ${{ steps.check-prod.outputs.changes }}
      qa-services: ${{ steps.check-qa.outputs.services }}
      uat-services: ${{ steps.check-uat.outputs.services }}
      prod-services: ${{ steps.check-prod.outputs.services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check for QA changes
        id: check-qa
        run: |
          CHANGES=$(git diff -U0 $(git rev-list -n 1 HEAD -- version.json)^..HEAD -- version.json | grep -E '^\+.*"qa": ' || echo "")
          if [ -n "$CHANGES" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            SERVICES=$(echo "$CHANGES" | grep -oE '^\+.*"[^"]+": ' | sed 's/^\+//' | sed 's/": //' | tr '\n' ',' | sed 's/,$//')
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "services=" >> $GITHUB_OUTPUT
          fi

      - name: Check for UAT changes
        id: check-uat
        run: |
          CHANGES=$(git diff -U0 $(git rev-list -n 1 HEAD -- version.json)^..HEAD -- version.json | grep -E '^\+.*"uat": ' || echo "")
          if [ -n "$CHANGES" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            SERVICES=$(echo "$CHANGES" | grep -oE '^\+.*"[^"]+": ' | sed 's/^\+//' | sed 's/": //' | tr '\n' ',' | sed 's/,$//')
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "services=" >> $GITHUB_OUTPUT
          fi

      - name: Check for Production changes
        id: check-prod
        run: |
          CHANGES=$(git diff -U0 $(git rev-list -n 1 HEAD -- version.json)^..HEAD -- version.json | grep -E '^\+.*"prod": ' || echo "")
          if [ -n "$CHANGES" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            SERVICES=$(echo "$CHANGES" | grep -oE '^\+.*"[^"]+": ' | sed 's/^\+//' | sed 's/": //' | tr '\n' ',' | sed 's/,$//')
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "services=" >> $GITHUB_OUTPUT
          fi

  deploy-qa:
    needs: detect-changes
    if: needs.detect-changes.outputs.qa-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ecommerce-infra repo
        uses: actions/checkout@v4
        with:
          path: ecommerce-infra
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Deploy to QA server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.QA_SERVER_HOST }}
          username: ${{ secrets.QA_SERVER_USER }}
          key: ${{ secrets.QA_SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ecommerce-infra
            git pull origin main
            ./run-qa-environment-ec2.sh

  deploy-uat:
    needs: detect-changes
    if: needs.detect-changes.outputs.uat-changes == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-west-2"
      DOMAIN_NAME: "uat.colbydobson.com."
      HOSTED_ZONE_ID: "Z1004002O65LEDO96H9N"

    steps:
      - name: Checkout ecommerce-infra repo
        uses: actions/checkout@v4
        with:
          path: ecommerce-infra
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Identify Blue-Green Current State
        id: identify
        run: |
          cd ecommerce-infra

          # Get current record sets for the domain
          echo "Fetching Route53 record sets for domain: ${{ env.DOMAIN_NAME }}"
          aws route53 list-resource-record-sets \
            --hosted-zone-id ${{ env.HOSTED_ZONE_ID }} \
            --query "ResourceRecordSets[?Name=='${{ env.DOMAIN_NAME }}']" \
            --output json > current-records.json

          # Debug: Show the raw record sets
          echo "Raw Route53 records:"
          cat current-records.json

          # Extract blue and green IPs and weights
          BLUE_IP=$(jq -r '.[] | select(.SetIdentifier=="uat1") | .ResourceRecords[0].Value' current-records.json)
          GREEN_IP=$(jq -r '.[] | select(.SetIdentifier=="uat2") | .ResourceRecords[0].Value' current-records.json)
          BLUE_WEIGHT=$(jq -r '.[] | select(.SetIdentifier=="uat1") | .Weight' current-records.json)
          GREEN_WEIGHT=$(jq -r '.[] | select(.SetIdentifier=="uat2") | .Weight' current-records.json)

          # Validate extracted values
          if [ -z "$BLUE_IP" ] || [ -z "$GREEN_IP" ]; then
            echo "ERROR: Failed to extract blue or green IP addresses from Route53 records"
            echo "Make sure the Route53 records exist with SetIdentifier 'blue' and 'green'"
            exit 1
          fi

          echo "Current configuration:"
          echo "Blue IP: $BLUE_IP (Weight: $BLUE_WEIGHT)"
          echo "Green IP: $GREEN_IP (Weight: $GREEN_WEIGHT)"

          # Determine which environment is active
          if [ "$BLUE_WEIGHT" -gt "$GREEN_WEIGHT" ]; then
            ACTIVE="blue"
            INACTIVE="green"
            echo "Blue is currently active"
          else
            ACTIVE="green"
            INACTIVE="blue"
            echo "Green is currently active"
          fi

          # Set outputs for next steps
          echo "blue_ip=$BLUE_IP" >> $GITHUB_OUTPUT
          echo "green_ip=$GREEN_IP" >> $GITHUB_OUTPUT
          echo "active=$ACTIVE" >> $GITHUB_OUTPUT
          echo "inactive=$INACTIVE" >> $GITHUB_OUTPUT

          # Debug: Verify outputs are set correctly
          echo "Outputs set:"
          echo "blue_ip: $BLUE_IP"
          echo "green_ip: $GREEN_IP"
          echo "active: $ACTIVE"
          echo "inactive: $INACTIVE"

      - name: Set Target Host
        id: set_host
        run: |
          if [ "${{ steps.identify.outputs.inactive }}" == "blue" ]; then
            echo "target_host=${{ steps.identify.outputs.blue_ip }}" >> $GITHUB_OUTPUT
          else
            echo "target_host=${{ steps.identify.outputs.green_ip }}" >> $GITHUB_OUTPUT
          fi
          echo "Target host for deployment: ${{ steps.identify.outputs.inactive }} environment"

      - name: Deploy to Inactive UAT Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ steps.set_host.outputs.target_host }}
          username: ${{ secrets.QA_SERVER_USER }}
          key: ${{ secrets.QA_SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ecommerce-infra
            git pull origin main
            ./run-uat-environment-ec2.sh

      - name: Run Smoke Test on Inactive Environment
        id: smoke_test
        run: |
          cd ecommerce-infra
          echo "Running smoke test on inactive ${{ steps.identify.outputs.inactive }} environment after deployment..."
          chmod +x ./run-smoketest.sh

          # Use the same target host as the deployment
          TARGET_IP="${{ steps.set_host.outputs.target_host }}"

          # Validate TARGET_IP is not empty and not localhost
          if [ -z "$TARGET_IP" ] || [ "$TARGET_IP" == "localhost" ]; then
            echo "ERROR: TARGET_IP is empty or localhost: '$TARGET_IP'"
            echo "This indicates the Route53 record extraction failed"
            exit 1
          fi

          echo "Target environment IP: $TARGET_IP"

          # Run the smoke test with explicit IP address
          echo "Executing: ./run-smoketest.sh $TARGET_IP"
          cat run-smoketest.sh
          ./run-smoketest.sh "$TARGET_IP"

          # Store the result
          SMOKE_TEST_RESULT=$?
          echo "smoke_test_result=$SMOKE_TEST_RESULT" >> $GITHUB_OUTPUT

          if [ $SMOKE_TEST_RESULT -eq 0 ]; then
            echo "✅ Smoke test passed! The inactive environment is healthy and ready for traffic."
          else
            echo "❌ Smoke test failed! Deployment was not successful."
            exit 1
          fi

      - name: Create Swap Configuration
        id: create_config
        if: steps.smoke_test.outputs.smoke_test_result == '0'
        run: |
          cd ecommerce-infra
          echo "Creating swap configuration since smoke test passed..."

          # Set weights based on active environment
          if [ "${{ steps.identify.outputs.active }}" == "blue" ]; then
            BLUE_WEIGHT=0
            GREEN_WEIGHT=100
          else
            BLUE_WEIGHT=100
            GREEN_WEIGHT=0
          fi

          # Create swap-weights.json with swapped weights
          cat > swap-weights.json << EOF
          {
            "Comment": "Blue/Green swap: sending traffic to ${{ steps.identify.outputs.inactive }} environment",
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${{ env.DOMAIN_NAME }}",
                  "Type": "A",
                  "SetIdentifier": "uat1",
                  "Weight": ${BLUE_WEIGHT},
                  "TTL": 60,
                  "ResourceRecords": [ { "Value": "${{ steps.identify.outputs.blue_ip }}" } ]
                }
              },
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${{ env.DOMAIN_NAME }}",
                  "Type": "A",
                  "SetIdentifier": "uat2",
                  "Weight": ${GREEN_WEIGHT},
                  "TTL": 60,
                  "ResourceRecords": [ { "Value": "${{ steps.identify.outputs.green_ip }}" } ]
                }
              }
            ]
          }
          EOF

          echo "Created swap configuration:"
          cat swap-weights.json

      - name: Apply Route53 Changes
        if: steps.smoke_test.outputs.smoke_test_result == '0'
        run: |
          cd ecommerce-infra
          echo "Applying Route53 changes to swap traffic from ${{ steps.identify.outputs.active }} to ${{ steps.identify.outputs.inactive }}..."

          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{ env.HOSTED_ZONE_ID }} \
            --change-batch file://swap-weights.json

          echo "Route53 changes applied successfully"
          echo "Traffic is now being directed to the ${{ steps.identify.outputs.inactive }} environment"

  deploy-prod:
    needs: detect-changes
    if: needs.detect-changes.outputs.prod-changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
